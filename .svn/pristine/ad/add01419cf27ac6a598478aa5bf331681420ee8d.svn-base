<!DOCTYPE html>
<html>
<head>
</head>
<body>
	<h2 class="page-title">Locating</h2>
	<div>
		<div id="img" style="margin-bottom: 25px; position: relative;">
				<img src="/locating/map.gif"/>
				
				<div class="location_map_node vtip" title="bla" style="position: absolute; cursor: pointer;">
					<img src="/locating/node.png" />
				</div>
				<!-- <img id="rotate" style="position: absolute; right: -20px; bottom: 125px; cursor: pointer;" src="/locating/rotate.png"/>-->

		</div>
		<div id="nodes">
			<div class="location_node" style="vertical-align: top; float: left;">
				<a class="assign_node vtip" title="click here and then choose a point on the map!" href="#" style="color: blue; font-weight: bold; font-size: 0.8em;">assign location</a><br/>
				<div class="node" style="margin-top: 3px;"></div>
			</div>
		</div>
		
		<div>
		</div>
		
		<script type="text/javascript">

		var assigning=null;
		$(function() {
			function start_assigning(nodeID) {
				assigning=nodeID;

				$("#img img")
					.css("cursor", "pointer")
					.click(function(eve) {
						var offset = $("#img img").offset();
						do_assigning(eve.pageX-offset.left, eve.pageY-offset.top);
					});
			}
			function do_assigning(x,y) {
				if (assigning==null) return;
				
				var nodeID = assigning;
				locations[assigning] = [x,y];
				
				$("#img img")
					.css("cursor", "")
					.unbind("click");
				
				assigning=null;
				
				update_locations();
				
				$.ajax({
					"url": "/locating/setlocation",
					data: {"nodeid": nodeID, "left": x, "top": y},
					context: this,
					success: function(data) {
					},
					error: function() {
					},
					complete: function() {
					}
				});
			}
			
			function update_locations() {
				for (var nodeID in lMapNodeTpl.entries) {
					lMapNodeTpl.entries[nodeID].remove();
				}
				for (var nodeID in locations) {
					var coords = locations[nodeID];
					
					var entry = new lMapNodeTpl(wsnnodes[nodeID], coords[0], coords[1]);
					entry.appendTo($("#img"));
				}
			}
			
			var lNodeTpl = create_template($(".location_node"), function(wsnnode) {
				
				var _this=this;
				this.wsnnode=wsnnode;
				
				
				var entry = new nodeTpl(wsnnode);
				entry.el.css("float","");
				entry.appendTo(this.el.find(".node"));
				
				this.el.find(".assign_node").bind("click", {nodeID: wsnnode.nodeID}, function(eve) {
					start_assigning(eve.data.nodeID);
				});
				
				entry.el.unbind("hover").hover(function(eve) {
					if (lMapNodeTpl.entries[_this.wsnnode.nodeID]!=null)
						lMapNodeTpl.entries[_this.wsnnode.nodeID].hover();

					if (nodeTpl.entries[_this.wsnnode.nodeID] != null)
						nodeTpl.entries[_this.wsnnode.nodeID].hover();
				}, function(eve) {
					if (lMapNodeTpl.entries[_this.wsnnode.nodeID]!=null)
						lMapNodeTpl.entries[_this.wsnnode.nodeID].hoverend();
					
					if (nodeTpl.entries[_this.wsnnode.nodeID] != null)
						nodeTpl.entries[_this.wsnnode.nodeID].hoverend();
				});
			});
			var lMapNodeTpl = create_template($(".location_map_node"), function(wsnnode, left, top) {
				this.tpl.entries[wsnnode.nodeID] = this;
				this.wsnnode = wsnnode;
				
				var _this=this;
				this.el.css("left", left+"px").css("top", top+"px");
				
				var hovertext = "Node: " + wsnnode.nodeID;
				for (var i=0; i<wsnnode.fields.length; i++) {
					hovertext += "\n\t" + (wsnnode.fields[i].name!=null ? wsnnode.fields[i].name : wsnnode.fields[i].type) + " " + wsnnode.fields[i].value + (wsnnode.fields[i].unit!=null?" "+wsnnode.fields[i].unit:"");
				}
				this.el.attr("title", hovertext);
				this.el.hover(function(eve) {
					_this.hover();	
					if (nodeTpl.entries[_this.wsnnode.nodeID] != null)
						nodeTpl.entries[_this.wsnnode.nodeID].hover();	
				}, function(eve) {
					_this.hoverend();
					if (nodeTpl.entries[_this.wsnnode.nodeID] != null)
						nodeTpl.entries[_this.wsnnode.nodeID].hoverend();
				});
			}, {
				hover: function() {
					this.el.find("img").attr("src", "/locating/node-active.png");
				},
				hoverend: function() {
					this.el.find("img").attr("src", "/locating/node.png");
				}
			});
			lMapNodeTpl.entries={};
			
			/* show node entries */
			for (var nodeID in wsnnodes) {

				/*entry.el.bind("mouseenter", {nodeID: nodeID}, function(eve) {
					highlightLinks(eve.data.nodeID);
				}).bind("mouseleave", {nodeID: nodeID}, function(eve) {
					unhighlightLinks(eve.data.nodeID);
				});*/
				var entry = new lNodeTpl(wsnnodes[nodeID]);
				entry.appendTo($("#nodes"));
				//$("#img").transition({rotate: 50});
			}
			
			update_locations();
			/*var mousedown=false;
			var rotation=null;
			var interval=null;
			$("#rotate").mousedown(function(eve) {
				mousedown=true;
				interval = setInterval(doRotate, 100);
				console.log("down");
				eve.preventDefault();
			});
			$(document).mouseup(function(eve) {
				mousedown=false;
				clearInterval(interval);
				console.log("up");
			});
			$(document).mousemove(function(eve) {
				if (true) {
					var imgw = $("#img").width();
					var imgh = $("#img").height();
					var imgoffset = $("#img").offset();
					
					var relToMiddle = {left: (eve.pageX-imgoffset.left-imgw/2), top: (eve.pageY-imgoffset.top-imgh/2)};
					
					var rot = Math.atan(relToMiddle.top/relToMiddle.left)*180/Math.PI;

					if (relToMiddle.left>=0 && relToMiddle.top<0) {
						//rot *= -1;
					} else if (relToMiddle.left<0 && relToMiddle.top<0) {
						rot = -90 - (90-rot);
					} else if (relToMiddle.left<0 && relToMiddle.top>=0) {
						rot = -180 + rot;
					} else {
						//rot *= -1;
					}

					//console.log(rot);
					rotation=rot;
				}
			});
			
			function doRotate() {
				
				$("#img").css("transform","rotate("+rotation+"deg);");
				//console.log(rotation);
			}*/ 
		});
		</script>
	</div>
</body>
</html>